@page "/cardedit/{UpdatedCardId:int}"
@inject IScratcherDb ScratcherDb
@inject NavigationManager NavigationManager


@if(UpdatedCard is not null)
{
    <EditForm Model="@UpdatedCard"
        OnSubmit="@HandleSubmit"
        FormName="EditCardForm" Enhance>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row mb-3">
            <label for="CardName"
            class="col-form-label col-md-3">Name</label>

            <div class="col-md-8">
                <InputText id="CardName"
                class="form-control col-md-8"
                @bind-Value="@UpdatedCard.Name"
                aria-placeholder="Enter name"></InputText>
            </div>
        </div>

         <div class="row mb-3">
            <label for="CardStartNum" class="col-form-label col-md-3">Starting Number: </label>
            <div class="col-md-8">
                <InputNumber id="CardStartNum" class="form-control col-md-8" @bind-Value="@UpdatedCard!.StartNumber" placeholder="Enter first number"></InputNumber>
            </div>
        </div>

        <div class="row mb-3">
            <label for="CardEndNum" class="col-form-label col-md-3">Ending Number: </label>
            <div class="col-md-8">
                <InputNumber id="CardEndNum" class="form-control col-md-8" @bind-Value="@UpdatedCard!.EndNumber" placeholder="Enter last number"></InputNumber>
            </div>
        </div>

        <div class="row mb-3">
            <label for="CardPrice" class="col-form-label col-md-3">Scratcher Price: </label>
            <div class="col-md-8">
                <InputNumber id="CardPrice" class="form-control col-md-8" @bind-Value="@UpdatedCard!.TicketPrice" placeholder="Enter price"></InputNumber>
            </div>
        </div>

        <div>
            <button type="submit" class="btn btn-outline-primary ms-1">Update</button>
            <button type="button" class="btn btn-outline-primary ms-1" @onclick="@NavigateToHome">
                Cancel
            </button>
        </div>

        </EditForm>
}

@if(!IsSaved)
{
    <p class="alert alert-danger">@Message</p>
}

@code
{
        [SupplyParameterFromForm]
        public Card? UpdatedCard{get; set;}

        [Parameter]
        public int UpdatedCardId{get; set;}

    protected bool IsSaved = false;
    private string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        if (UpdatedCardId != 0)
        {
            UpdatedCard = await ScratcherDb.GetCardAsync(UpdatedCardId);

        }
        else
        {
            Message = "card id is 0.";
        }
        IsSaved = false;
        await Task.CompletedTask;

    }

    protected async Task HandleSubmit()
    {

        if(UpdatedCard != null)
        {
            Card cardToUpdate = new Card();
            cardToUpdate.Name = UpdatedCard.Name;
            cardToUpdate.StartNumber = UpdatedCard.StartNumber;
            cardToUpdate.EndNumber = UpdatedCard.EndNumber;
            cardToUpdate.TicketPrice = UpdatedCard.TicketPrice;
            Message = "Scratch Card updated successfully."; 

            
            int rowsUpdated = await ScratcherDb.SaveCardAsync(cardToUpdate);
            if(rowsUpdated == 0)
            {
                Message = "Card Not Updated.";
                IsSaved = false;
            }
            else
            {
                IsSaved = true;
            
                NavigateToHome();
            }
        }else{
            Message = "UpdateCard is null.";
            IsSaved = false;
        }

    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}